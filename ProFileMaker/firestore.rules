rules_version = '2';
service cloud.firestore {
  function isAdmin() {
    return request.auth.token.admin == true;
  }
  
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }
  
  function isValidProject() {
    return request.resource.data.title is string
      && request.resource.data.title.size() >= 2
      && request.resource.data.description is string
      && request.resource.data.userId == request.auth.uid;
  }
  
  function isValidActivity() {
    return request.resource.data.userId == request.auth.uid
      && request.resource.data.type is string
      && request.resource.data.message is string;
  }

  match /databases/{database}/documents {
    // Stripe customer and billing rules
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // User profiles
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.userId) && isValidProject();
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Connections
    match /connections/{connectionId} {
      allow read: if isOwner(resource.data.userId) || 
                   isOwner(resource.data.connectedUserId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.connectedUserId); // For accepting requests
      allow delete: if isOwner(resource.data.userId) || 
                     isOwner(resource.data.connectedUserId);
    }
    
    // Activity feed
    match /activity/{activityId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId) && isValidActivity();
      allow delete: if isAdmin();
    }
    
    // Portfolio items 
    match /portfolios/{userId}/{itemId} {
      allow read: if true;
      allow create, update, delete: if isOwner(userId) &&
                                   request.resource.data.title is string &&
                                   request.resource.data.title.size() >= 2;
    }
    
    // Existing profile rules
    match /profiles/{userId} {
      allow get: if resource.data.isPublished == true || isOwner(userId);

      // Allow updates that only set selectedTemplate (and possibly lastUpdated/userId)
      allow create, update: if isOwner(userId) && (
        (
          // Allow if only updating selectedTemplate, lastUpdated, or userId
          request.resource.data.keys().hasOnly(['selectedTemplate', 'lastUpdated', 'userId'])
        ) ||
        (
          // Otherwise, require displayName for full profile updates
          request.resource.data.displayName is string &&
          request.resource.data.displayName.size() >= 2 &&
          (
            request.resource.data.isPublished == false ||
            (
              request.resource.data.domain is string &&
              request.resource.data.domain.matches('^[a-z0-9-]{3,20}$')
            )
          )
        )
      );
    }
    
    // Allow users to read and write their own profile document
    match /profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}