rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User documents (for authentication data)
    match /users/{userId} {
      allow read, write: if request.auth != null &&
                         request.auth.uid == userId;
    }

    // Profile documents
    match /profiles/{userId} {
      // Public read access for published profiles only
      allow get: if resource.data.isPublished == true ||
                 (request.auth != null && request.auth.uid == userId);

      // Only owner can create/update
      allow create, update: if request.auth != null &&
                            request.auth.uid == userId &&
                            // Validate required fields
                            request.resource.data.displayName is string &&
                            request.resource.data.displayName.size() >= 2 &&
                            // Domain validation if publishing
                            (request.resource.data.isPublished == false ||
                             (request.resource.data.domain is string &&
                              request.resource.data.domain.matches('^[a-z0-9-]{3,20}$')));
    }

    // Domain reservations
    match /domains/{domain} {
      allow get: if true;  // Public read for availability checks
      allow create: if request.auth != null &&
                     domain.matches('^[a-z0-9-]{3,20}$') &&
                     // Reserved domains protection
                     !(['www', 'app', 'admin', 'api'].hasAny([domain.toLowerCase()])) &&
                     // Ensure the creator owns the profile they're associating
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.isPublished == false;
      allow update, delete: if false;
    }

    // Portfolio items
    match /portfolios/{userId}/{itemId} {
      allow read: if true;  // Public read
      allow create, update, delete: if request.auth != null &&
                                   request.auth.uid == userId &&
                                   // Validate required fields
                                   request.resource.data.title is string &&
                                   request.resource.data.title.size() >= 2;
    }

    // Audit trail (optional)
    match /audit/{userId}/{logId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
  }
}
