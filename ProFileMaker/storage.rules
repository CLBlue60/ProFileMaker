rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /public/{allPaths=**} {
      allow read;
    }

    // User-specific uploads
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Project images
    match /projects/{projectId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if canEditProject(projectId);
    }

    // Profile pictures
    match /profile_pictures/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Validate file type and size
      allow create: if request.resource.size < 5 * 1024 * 1024 // 5MB
                   && request.resource.contentType.matches('image/.*');
    }

    // Avatars
    match /avatars/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // Temporary uploads
    match /temp/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if false; // Temporary files shouldn't be readable
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Helper function for project access
    function canEditProject(projectId) {
      return request.auth != null && 
             get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
    }

    // Global fallback rules
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}